{
  "language": "Solidity",
  "sources": {
    "contracts/RewardDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract RewardDistribution  {\r\n    address public owner;\r\n    address public usdt;\r\n    address public doge;\r\n    IRouter public pancakeRouter;\r\n\r\n    uint256 public communityLevel1RewardPercent = 5; // 5% reward for community level 1\r\n    uint256 public communityLevel2RewardPercent = 10; // 10% reward for community level 2\r\n    uint256 public communityLevel3RewardPercent = 15; // 15% reward for community level 3\r\n\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint256) public userBalance;\r\n    mapping(address => uint256) public userLevel;\r\n\r\n    event UserRegistered(address indexed user, address indexed referrer);\r\n    event PackagePurchased(address indexed user, uint256 amount);\r\n    event ReferralReward(address indexed referrer, address indexed referee, uint256 amount, bool direct);\r\n    event TeamRewardPaid(address indexed user, uint256 amount);\r\n    event CommunityLevelUpdated(uint256 level, uint256 requiredUSDT, uint256 rewardPercent);\r\n    event Release(address indexed user, uint256 usdtAmount, uint256 dogeAmount);\r\n    event SwapExecuted(uint256 usdtAmount, uint256 dogeAmount);\r\n    event PancakeRouterUpdated(address newRouter);\r\n    event Withdrawn(address indexed token, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExistingUser() {\r\n        require(userBalance[msg.sender] > 0, \"User does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        uint256 localCounter = _counter;\r\n        _counter++;\r\n        require(localCounter == 0, \"Reentrancy detected\");\r\n        _;\r\n        _counter--;\r\n    }\r\n\r\n    uint256 private _counter;\r\n\r\n    constructor(address _usdt, address _doge, address _pancakeRouter) {\r\n        owner = msg.sender;\r\n        usdt = _usdt;\r\n        doge = _doge;\r\n        pancakeRouter = IRouter(_pancakeRouter);\r\n    }\r\n\r\n    // 用户注册\r\n    function registerUser(address _referrer) external nonReentrant {\r\n        require(referrers[msg.sender] == address(0), \"User already registered\");\r\n        referrers[msg.sender] = _referrer;\r\n        emit UserRegistered(msg.sender, _referrer);\r\n    }\r\n\r\n    // 用户购买套餐\r\n    function purchasePackage(address _referrer) external nonReentrant {\r\n        uint256 amount = 1000 * 10**6; // 1000 USDT in 6 decimal places (for example)\r\n        uint256 dogeAmount = _swapUSDTToDOGE(amount);\r\n\r\n        userBalance[msg.sender] += dogeAmount;\r\n        emit PackagePurchased(msg.sender, amount);\r\n\r\n        _distributeReferralRewards(_referrer, amount);\r\n        _distributeTeamRewards(msg.sender, amount);\r\n    }\r\n\r\n    // 释放 DOGE 奖励\r\n    function releaseDOGE() external nonReentrant onlyExistingUser {\r\n        uint256 usdtAmount = userBalance[msg.sender];\r\n        uint256 dogeAmount = _swapUSDTToDOGE(usdtAmount);\r\n        userBalance[msg.sender] = 0;\r\n        emit Release(msg.sender, usdtAmount, dogeAmount);\r\n    }\r\n\r\n    // 更新 PancakeSwap 路由器地址\r\n    function setPancakeRouter(address _pancakeRouter) external onlyOwner {\r\n        pancakeRouter = IRouter(_pancakeRouter);\r\n        emit PancakeRouterUpdated(_pancakeRouter);\r\n    }\r\n\r\n    // 分配推荐奖励\r\n    function _distributeReferralRewards(address _referrer, uint256 amount) private {\r\n        if (_referrer != address(0)) {\r\n            uint256 rewardAmount = (amount * 5) / 100; // Direct reward 5%\r\n            userBalance[_referrer] += rewardAmount;\r\n            emit ReferralReward(_referrer, msg.sender, rewardAmount, true);\r\n\r\n            address indirectReferrer = referrers[_referrer];\r\n            if (indirectReferrer != address(0)) {\r\n                uint256 indirectRewardAmount = (amount * 3) / 100; // Indirect reward 3%\r\n                userBalance[indirectReferrer] += indirectRewardAmount;\r\n                emit ReferralReward(indirectReferrer, msg.sender, indirectRewardAmount, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 分配团队奖励\r\n    function _distributeTeamRewards(address userAddress, uint256 amount) private {\r\n        uint256 teamReward = (amount * 10) / 100; // Team reward 10%\r\n        userBalance[userAddress] += teamReward;\r\n        emit TeamRewardPaid(userAddress, teamReward);\r\n    }\r\n\r\n    // 根据 USDT 兑换 DOGE\r\n   function _swapUSDTToDOGE(uint256 usdtAmount) public returns (uint256) {\r\n    address[] memory path = new address[](2); // 声明并初始化 path 数组\r\n    path[0] = usdt;\r\n    path[1] = doge;\r\n\r\n    uint256 amountOutMin = 1; // 假设 1 DOGE\r\n    uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(\r\n        usdtAmount,\r\n        amountOutMin,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n\r\n    emit SwapExecuted(usdtAmount, amounts[1]);\r\n    return amounts[1];\r\n}\r\n\r\n    // 提取代币\r\n    function withdrawToken(address _token, uint256 _amount) external onlyOwner {\r\n        require(IERC20(_token).transfer(owner, _amount), \"Transfer failed\");\r\n        emit Withdrawn(_token, _amount);\r\n    }\r\n\r\n    // 更新社区奖励等级\r\n    function setCommunityLevel(uint256 level, uint256 requiredUSDT, uint256 rewardPercent) external onlyOwner {\r\n        if (level == 1) {\r\n            communityLevel1RewardPercent = rewardPercent;\r\n        } else if (level == 2) {\r\n            communityLevel2RewardPercent = rewardPercent;\r\n        } else if (level == 3) {\r\n            communityLevel3RewardPercent = rewardPercent;\r\n        }\r\n        emit CommunityLevelUpdated(level, requiredUSDT, rewardPercent);\r\n    }\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}